from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List, Annotated, Optional
from datetime import datetime
from fastapi import Query
from datetime import datetime
from app.db import SessionLocal
from pydantic import BaseModel
from app.models.datasets import AudioDataset
from app.services import dataset_service
from app.schemas.dataset import DatasetListResponse, DatasetResegmentRequest
from app.schemas.dataset import (
    DatasetCreate,
    DatasetUpdate,
    DatasetOut,
    DatasetInitRequest,
    DatasetImageUpdate
)
from app.tasks.initialize_dataset_tasks import initialize_dataset_task, resegment_dataset_task
from app.services.initialize_service import create_dataset_entry
import logging
logger = logging.getLogger(__name__)



router = APIRouter(prefix="/datasets", tags=["datasets"])


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()



# ---------------------
# üìç –†–æ—É—Ç—ã
# ---------------------




@router.get("/", response_model=DatasetListResponse)
def get_all_datasets(
    page: int = Query(1, ge=1),   # –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
    limit: int = Query(10, ge=1), # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    status: Optional[str] = None,
    name_search: Optional[str] = None,
    created_from: Optional[datetime] = None,
    created_to: Optional[datetime] = None,
    db: Session = Depends(get_db),
):
    return dataset_service.get_all_datasets(
        db=db,
        limit=limit,
        page=page,
        status=status,
        name_search=name_search,
        created_from=created_from,
        created_to=created_to,
    )

@router.get("/{dataset_id}", response_model=DatasetOut)
def get_dataset_by_id(dataset_id: int, db: Session = Depends(get_db)):
    return dataset_service.get_dataset_by_id(dataset_id, db)


@router.put("/{dataset_id}", response_model=DatasetOut)
def update_dataset(dataset_id: int, dataset: DatasetUpdate, db: Session = Depends(get_db)):
    return dataset_service.update_dataset(dataset_id, dataset, db)

@router.delete("/{dataset_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_dataset(dataset_id: int, db: Session = Depends(get_db)):
    dataset_service.delete_dataset(dataset_id, db)
    return


@router.post("/initialize")
async def initialize_dataset(data: DatasetInitRequest, db: Session = Depends(get_db)):
    # –®–∞–≥ 0: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–∫–æ–≥–æ –∂–µ URL –≤ –±–∞–∑–µ
    existing_dataset = db.query(AudioDataset).filter(AudioDataset.url == data.url).first()
    if existing_dataset:
        logger.info(f"–î–∞—Ç–∞—Å–µ—Ç —Å —Ç–∞–∫–∏–º URL —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ID={existing_dataset.id}, name={existing_dataset.name}")
        raise HTTPException(
            status_code=409,
            detail={
                "message": "–í–∏–¥–µ–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ",
                "dataset_id": existing_dataset.id,
                "status": existing_dataset.status
            }
        )

    # –®–∞–≥ 1: —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º INITIALIZING
    dataset_id = await create_dataset_entry(db, data.url)

    # –®–∞–≥ 2: –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    task = initialize_dataset_task.delay(dataset_id, data.dict())

    return {
        "message": "–ó–∞–¥–∞—á–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
        "task_id": task.id,
        "dataset_id": dataset_id
    }



@router.post("/{dataset_id}/resegment")
async def resegment_dataset_route(
    dataset_id: int, 
    data: DatasetResegmentRequest, 
    db: Session = Depends(get_db)
):
    """
    –†–µ—Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    
    - **dataset_id**: ID –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è —Ä–µ—Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    - **min_duration**: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    - **max_duration**: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞
    existing_dataset = db.query(AudioDataset).filter(AudioDataset.id == dataset_id).first()
    if not existing_dataset:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ—Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞: ID={dataset_id}")
        raise HTTPException(
            status_code=404,
            detail=f"–î–∞—Ç–∞—Å–µ—Ç —Å ID {dataset_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞—Å–µ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–µ—Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    from app.models.datasets import DatasetStatus
    if existing_dataset.status not in [DatasetStatus.SAMPLED, DatasetStatus.ERROR]:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ—Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞ –≤ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–º —Å—Ç–∞—Ç—É—Å–µ: ID={dataset_id}, status={existing_dataset.status}")
        raise HTTPException(
            status_code=400,
            detail={
                "message": f"–î–∞—Ç–∞—Å–µ—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ '{existing_dataset.status}' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ—Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω",
                "current_status": existing_dataset.status,
                "allowed_statuses": ["SAMPLED", "ERROR"]
            }
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if data.min_duration >= data.max_duration:
        raise HTTPException(
            status_code=400,
            detail="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π"
        )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    logger.info(f"–ó–∞–ø—É—Å–∫ —Ä–µ—Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞: ID={dataset_id}, min={data.min_duration}s, max={data.max_duration}s")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Ä–µ—Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    task = resegment_dataset_task.delay(
        dataset_id=dataset_id,
        min_duration=data.min_duration,
        max_duration=data.max_duration
    )
    
    return {
        "message": "–ó–∞–¥–∞—á–∞ —Ä–µ—Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å",
        "task_id": task.id,
        "dataset_id": dataset_id,
        "dataset_name": existing_dataset.name,
        "parameters": {
            "min_duration": data.min_duration,
            "max_duration": data.max_duration
        }
    }